buildscript {
    repositories {
        mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
		classpath 'com.radcortez.gradle:openjpa-gradle-plugin:3.1.0'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'openjpa'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations.all {
	all*.exclude group: 'org.apache.hadoop'		// not found on Maven Central?
}

// this is the version of the jar-files of Apache POI that are used for testing
def poiVersion = '5.2.3-SNAPSHOT'

// this is the version that is used in the database for this run
// make sure to update classes POIStatus and Report to handle this version correctly
def poiVersionRC = '-5.2.0-RC1'

//provide defaults so we do not need to specify them always
if (!project.hasProperty('resultFile')) {
    ext.resultFile = 'result-' + poiVersion + poiVersionRC + '-' + getDateTime() + '.json'
}
if (!project.hasProperty('poiDir')) {
    ext.poiDir = '/opt/poi'
}
if (!project.hasProperty('esHost')) {
    ext.esHost = 'localhost'
}
if (!project.hasProperty('esUser')) {
    ext.esUser = ''
}
if (!project.hasProperty('esPassword')) {
    ext.esPassword = ''
}

sourceSets {
	poiIntegrationTest {
		java {
			srcDir 'src/poiIntegTest/java'
		}
		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
    // we should move this to a separate source-set, but I could not find out easily
	// how to define the dependencies on the poiIntegrationTest source-set then
	poiIntegrationTest {
		java {
			srcDir 'src/testpoi/java'
		}
		resources {
			srcDir 'src/testpoi/resources'
		}
		compileClasspath += sourceSets.main.compileClasspath
		runtimeClasspath += sourceSets.main.runtimeClasspath
	}
}

configurations {
	poiIntegrationImplementation.extendsFrom testImplementation
	poiIntegrationRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	compile 'org.dstadler:commons-dost:1.1.0.0'
	compile 'org.dstadler:commoncrawldownload:1.0.0.7'
	compile 'com.fasterxml.jackson.core:jackson-core:2.13.1'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
	compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.1'
	compile 'commons-io:commons-io:2.11.0'
	compile 'org.apache.commons:commons-lang3:3.12.0'
	compile 'org.apache.commons:commons-text:1.9'
	compile 'com.google.code.gson:gson:2.8.9'
	compile 'org.apache.velocity:velocity:1.7'

	compile 'org.apache.openjpa:openjpa:3.2.1'
	runtime 'org.apache.commons:commons-dbcp2:2.9.0'
	compile 'org.apache.derby:derbynet:10.14.2.0'
	runtime 'org.apache.derby:derbyclient:10.14.2.0'

	// use the desired version of POI

	// Testing with released version of POI
	/*compile 'org.apache.poi:poi:' + poiVersion
	compile 'org.apache.poi:poi-ooxml:' + poiVersion
	compile 'org.apache.poi:poi-scratchpad:' + poiVersion
	compile 'org.apache.xmlgraphics:batik-all:1.12'*/

	// Testing with downloaded pre-release of POI
	/*compile files(poiDir + '/ooxml-lib/xmlbeans-3.0.2.jar')
	//compile files('/opt/xmlbeans/build/ar/xbean.jar')
	compile files(poiDir + '/compile-lib/batik-all-1.12.jar')
	compile files(poiDir + '/lib/commons-collections4-4.2.jar')
	compile files(poiDir + '/lib/commons-compress-1.20.jar')
	compile files('/tmp/dist.apache.org/repos/dist/dev/poi/' + poiVersion + poiVersionRC + '/maven/poi/poi-' + poiVersion + '.jar')
	compile files('/tmp/dist.apache.org/repos/dist/dev/poi/' + poiVersion + poiVersionRC + '/maven/poi-ooxml/poi-ooxml-' + poiVersion + '.jar')
	compile files('/tmp/dist.apache.org/repos/dist/dev/poi/' + poiVersion + poiVersionRC + '/maven/poi-ooxml-schemas/poi-ooxml-schemas-' + poiVersion + '.jar')
	compile files('/tmp/dist.apache.org/repos/dist/dev/poi/' + poiVersion + poiVersionRC + '/maven/poi-scratchpad/poi-scratchpad-' + poiVersion + '.jar')*/

	// Testing with latest trunk-POI
	compile files(poiDir + '/lib/main/commons-collections4-4.4.jar')
	compile files(poiDir + '/lib/main/commons-math3-3.6.1.jar')
	compile files(poiDir + '/lib/main/SparseBitSet-1.2.jar')
	compile files(poiDir + '/lib/main/log4j-api-2.17.2.jar')
	compile files(poiDir + '/lib/main-tests/log4j-core-2.17.2.jar')
	compile files(poiDir + '/lib/main-tests/junit-jupiter-api-5.8.2.jar')
	compile files(poiDir + '/lib/main-tests/junit-jupiter-engine-5.8.2.jar')
	compile files(poiDir + '/lib/main-tests/junit-jupiter-params-5.8.2.jar')
	compile files(poiDir + '/lib/main-tests/junit-platform-commons-1.8.1.jar')
	compile files(poiDir + '/lib/main-tests/junit-platform-engine-1.8.1.jar')
	compile files(poiDir + '/lib/main-tests/junit-platform-launcher-1.8.1.jar')
	compile files(poiDir + '/lib/main-tests/opentest4j-1.2.0.jar')
	compile files(poiDir + '/lib/ooxml/commons-compress-1.21.jar')
	compile files(poiDir + '/lib/ooxml/xmlbeans-5.0.3.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-anim-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-awt-util-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-bridge-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-codec-1.15.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-constants-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-css-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-dom-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-ext-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-gvt-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-i18n-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-parser-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-script-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-shared-resources-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-svg-dom-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-svggen-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-svgrasterizer-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-transcoder-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-util-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/batik-xml-1.14.jar')
	compile files(poiDir + '/lib/ooxml-batik/xml-apis-ext-1.3.04.jar')
	compile files(poiDir + '/lib/ooxml-batik/xmlgraphics-commons-2.4.jar')
	compile files(poiDir + '/build/dist/maven/poi/poi-' + poiVersion + '.jar')
    compile files(poiDir + '/build/dist/maven/poi-ooxml/poi-ooxml-' + poiVersion + '.jar')
    //compile files(poiDir + '/build/dist/maven/poi-ooxml-lite/poi-ooxml-lite-' + poiVersion + '.jar')
    compile files(poiDir + '/build/dist/maven/poi-ooxml-full/poi-ooxml-full-' + poiVersion + '.jar')
    compile files(poiDir + '/build/dist/maven/poi-scratchpad/poi-scratchpad-' + poiVersion + '.jar')

	testCompile 'junit:junit:4.13.2'
	testCompile 'org.apache.ant:ant:1.10.11'
	testCompile 'org.dstadler:commons-test:1.0.0.19'

	// we use the integration-test framework from POI here as well
	poiIntegrationTestCompile files(poiDir + '/build/dist/maven/poi-integration-tests/poi-integration-' + poiVersion + '-tests.jar')
	// required for NullPrintStream for now
	poiIntegrationTestCompile files(poiDir + '/build/dist/maven/poi-tests/poi-' + poiVersion + '-tests.jar')
	// dependencies for the Integration-Test part
	poiIntegrationTestCompile 'junit:junit:4.13.2'
	poiIntegrationTestCompile 'org.apache.ant:ant:1.10.11'
}

openjpa {
	includes = ['**/jpa/**']
	excludes = [
		'**/Base.*',
		'**/FileStatus.*'
	]
}

wrapper {
    gradleVersion = '6.6.1'
}

test {
	systemProperties = System.properties

	// show standard out and standard error of the test JVM(s) on the console
	//testLogging.showStandardStreams = true

	// http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
	systemProperties['user.dir'] = workingDir
}

jacoco {
	toolVersion = '0.8.7'
}

tasks.register('poiIntegrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'

	testClassesDirs = sourceSets.poiIntegrationTest.output.classesDirs
	classpath = sourceSets.poiIntegrationTest.runtimeClasspath
	shouldRunAfter test
}

task processFiles(type:JavaExec, dependsOn: compileJava) {
	description = 'Iterates over all files in the download-dir and calls the POI integration test on them, recording failures in a json-file'

	jvmArgs = [
			// using this much memory may require increasing limits in /etc/security/limits.conf
			'-Xmx10000m',
			'-Xms10000m',
			// https://docs.oracle.com/javase/8/embedded/develop-apps-platforms/codecache.htm
			//'-XX:+PrintCompilation',
			'-XX:+PrintCodeCache',
			'-XX:ReservedCodeCacheSize=100m',
			'-javaagent:lib/file-leak-detector-1.15-SNAPSHOT-jar-with-dependencies.jar=http=0,strong,excludes=file-leak-detector.exclude,dumpatshutdown',
			// to avoid having strange stacktraces with only the Exception-class
			'-XX:-OmitStackTraceInFastThrow',
			// required for JDK 9 to have stuff in javax.xml.bind available
			/*'-Dsun.reflect.debugModuleAccessChecks=true',
            '--add-opens=java.base/java.net=ALL-UNNAMED',
            '--add-opens=java.base/java.io=ALL-UNNAMED',
            '-Djava.locale.providers=JRE,CLDR',*/
			// See note on https://poi.apache.org/components/slideshow/ppt-wmf-emf-renderer.html
			// under "Instructions to run"
			'-Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine',

			// see XMLBEANS-525: '-Dxbean.disable.locking=true'
	]
	args = [ resultFile ]

	main = 'org.dstadler.commoncrawl.ProcessFiles'
	classpath = sourceSets.poiIntegrationTest.runtimeClasspath
}

task processFilesFromJSON(type:JavaExec, dependsOn: compileJava) {
	description = 'Iterates over all files in the given JSON-file and calls the POI integration test on them, recording failures in a json-file'

	jvmArgs = [
			'-Xmx3g',
			// to avoid having strange stacktraces with only the Exception-class
			'-XX:-OmitStackTraceInFastThrow',
			'-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/tmp'
	]
	args = [ '/opt/file-type-detection/filetypes.txt']

	main = 'org.dstadler.commoncrawl.ProcessJSONListOfFiles'
	classpath = sourceSets.poiIntegrationTest.runtimeClasspath
}

task processResults(type:JavaExec, dependsOn: compileJava) {
	description = 'Updates the database with the latest results that are stored in a result-file'

	jvmArgs = [
			'-Xmx512m',
			'-javaagent:lib/file-leak-detector-1.15-SNAPSHOT-jar-with-dependencies.jar=http=0,strong,excludes=file-leak-detector.exclude,dumpatshutdown'
	]
	args = [ resultFile ]

	main = 'org.dstadler.commoncrawl.ProcessResults'
	classpath = sourceSets.main.runtimeClasspath
}

task report(type:JavaExec, dependsOn: compileJava) {
	description = 'Generates the report by reading from the database'

	jvmArgs = [
			'-Xmx512m',
			'-javaagent:lib/file-leak-detector-1.15-SNAPSHOT-jar-with-dependencies.jar=http=0,strong,excludes=file-leak-detector.exclude,dumpatshutdown'
	]

	main = 'org.dstadler.commoncrawl.Report'
	classpath = sourceSets.main.runtimeClasspath
}

task syncReport(type:Exec) {
	description = 'Publish resulting HTML files on the Apache server'

    commandLine './syncReport.sh'
}

task deduplicate(type:JavaExec, dependsOn: compileJava) {
	description = 'Compare available files in ../download and move duplicate ones to ../backup to not re-process the same content over and over again'

	jvmArgs = [
			'-Xmx1024m',
			'-javaagent:lib/file-leak-detector-1.15-SNAPSHOT-jar-with-dependencies.jar=http=0,strong,excludes=file-leak-detector.exclude,dumpatshutdown'
	]

	main = 'org.dstadler.commoncrawl.Deduplicate'
	classpath = sourceSets.poiIntegrationTest.runtimeClasspath
}

task exportToElasticsearchFromJSON(type:JavaExec, dependsOn: compileJava) {
	description = 'Uses a JSON export of the Database with POIStatus objects to write the data to Elasticsearch. ' +
			'See ElasticsearchWriterFromJSON.java for details. ' +
			'Call with ./gradlew -PesHost=host -PesUser=user -PesPassword=pwd exportToElasticsearchFromJSON'

	jvmArgs = [
			'-Xmx2048m',
			'-javaagent:lib/file-leak-detector-1.15-SNAPSHOT-jar-with-dependencies.jar=http=0,strong,excludes=file-leak-detector.exclude,dumpatshutdown',
            		'-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/tmp'
	]

	main = 'org.dstadler.commoncrawl.utils.ElasticsearchWriterFromJSON'
	args = [ esHost, esUser, esPassword ]
	classpath = sourceSets.main.runtimeClasspath
}

task processResultsToCSV(type:JavaExec, dependsOn: compileJava) {
	description = 'Reads the result-file and convers the JSON format to a CSV file'

	jvmArgs = [
			'-Xmx2048m',
			'-javaagent:lib/file-leak-detector-1.15-SNAPSHOT-jar-with-dependencies.jar=http=0,strong,excludes=file-leak-detector.exclude,dumpatshutdown',
            		'-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=/tmp'
	]

	main = 'org.dstadler.commoncrawl.utils.ProcessResultsToCSV'
	args = [ resultFile ]
	classpath = sourceSets.main.runtimeClasspath
}

static def getDateTime() {
	new Date().format("yyyy-MM-dd-HH-mm")
}

test.dependsOn enhance
check.dependsOn poiIntegrationTest

task checkPOIJars {
        doLast() {
                System.out.println("Looking for Apache POI binaries in directory " + poiDir)
                assert file (poiDir + '/build/dist/maven/').exists()
                assert file (poiDir + '/build/dist/maven/poi/poi-' + poiVersion + '.jar').exists()
                assert file (poiDir + '/build/dist/maven/poi-ooxml/poi-ooxml-' + poiVersion + '.jar').exists()
                assert file (poiDir + '/build/dist/maven/poi-ooxml-full/poi-ooxml-full-' + poiVersion + '.jar').exists()
                assert file (poiDir + '/build/dist/maven/poi-scratchpad/poi-scratchpad-' + poiVersion + '.jar').exists()
                assert file (poiDir + '/build/dist/maven/poi-integration-tests/poi-integration-' + poiVersion + '-tests.jar').exists()
        }
}
compileJava.dependsOn checkPOIJars
